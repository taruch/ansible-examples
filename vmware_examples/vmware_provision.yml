---
- name: Provision VM from vm_template
  hosts: localhost
  gather_facts: false

  vars_files:
    - secrets.yml

  tasks:
    # --- STEP 1: Provision a VM from a template ---
    - name: Provision a VM
      ansible.builtin.include_role:
        name: cloud.vmware_ops.provision_vm
      vars:
        provision_vm_hostname: "{{ vcenter_hostname | default(omit) }}"
        provision_vm_username: "{{ vcenter_username | default(omit) }}"
        provision_vm_password: "{{ vcenter_password | default(omit) }}"
#        provision_vm_validate_certs: false
        provision_vm_cluster: "Cluster-1"
        provision_vm_datacenter: "SDDC-Datacenter"
        provision_vm_folder: "Workloads/{{ vcenter_folder }}"
        provision_vm_name: "{{ vm_name }}"
        provision_vm_template: "{{ vm_template }}"
        # provision_vm_datastore: "{{ vcenter_datastore | default(omit) }}"
#        provision_vm_port: "8989"
#        provision_vm_disk:
#        - size_gb: 10
#          type: thin
#          datastore: "LocalDS_0"
        provision_vm_hardware:
          hotadd_memory: true
          memory_mb: "{{ memsize_MiB | default(omit) }}"
          hotadd_cpu: true
          num_cpus: "{{ vm_cpus | default(omit) }}"
#        provision_vm_guest_id: "rhel9_64Guest"
        provision_vm_state: poweredon
      register: role_output

    - name: Pause for 30 seconds to allow VM to get IP address
      ansible.builtin.pause:
        seconds: 30

    # --- STEP 2: Query vCenter for the VM's details ---
    - name: "Get facts for the VM '{{ vm_name }}'"
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        name: "{{ vm_name }}"
      register: vm_facts # Register the output of the INFO module
      until: vm_facts.instance.ipv4 is defined
      retries: 10 # Number of retries
      delay: 15 # Delay between retries in seconds

    - name: Debug the gathered facts
      ansible.builtin.debug:
        var: vm_facts

    - name: "Display the IP address of the VM"
      ansible.builtin.debug:
        msg: "VM '{{ vm_name }}' was found with IP address: {{ vm_facts.instance.ipv4 }}"
      when: vm_facts.instance is defined and vm_facts.instance.ipv4 is defined

    # - name: "Add the new VM to our in-memory inventory"
    #   ansible.builtin.add_host:
    #     name: "{{ vm_facts.instance.ipv4 }}"
    #     groups: just_created_vms
    #   when: vm_facts.instance is defined and vm_facts.instance.ipv4 is defined

    - name: Send data to follow-on playbook
      ansible.builtin.set_stats:
        data:
          new_vm_info: "{{ vm_facts.instance }}"
      when: vm_facts.instance is defined

...
