---
- name: Import file tree into controller
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
    aap_username: "{{ vault_aap_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    aap_password: "{{ vault_aap_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    aap_hostname: "{{ vault_aap_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    aap_validate_certs: "{{ vault_aap_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
    import_path: "./export_ft7"

  pre_tasks:
    - name: "Setup authentication (block)"
      when: controller_oauthtoken is not defined
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/gateway/v1/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            aap_token: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"

  tasks:
    - name: Read configuration variables from the exported filetree
      ansible.builtin.include_role:
        # name: infra.controller_configuration.filetree_read
        name: infra.aap_configuration_extended.filetree_read
      vars:
        # These variables tell filetree_read where to find your exported configuration
        orgs: ""
        dir_orgs_vars: "{{ import_path }}"
        # filetree_controller_settings: "{{ import_path }}"
        filetree_controller_organizations: "{{ import_path }}"
        filetree_controller_credential_types: "{{ import_path }}"
        filetree_controller_credentials: "{{ import_path }}"
        filetree_controller_notification_templates: "{{ import_path }}"
        filetree_controller_projects: "{{ import_path }}"
        filetree_controller_inventories: "{{ import_path }}"
        filetree_controller_inventory_sources: "{{ import_path }}"
        filetree_controller_templates: "{{ import_path }}"
        filetree_controller_workflow_job_templates: "{{ import_path }}"
        # filetree_controller_schedules: "{{ import_path }}"
        # filetree_controller_notifications: "{{ import_path }}"
        # filetree_controller_labels: "{{ import_path }}"
        # If you have a specific directory structure for your filetree, you can specify it here
        # dir_settings_vars: "{{ dir_settings_vars | default(omit) }}" # Include if you have global settings
        # If your export structure uses an 'env' directory (e.g., orgs/MyOrg/env/dev), specify it:
        # filetree_env: "dev"
        
        # controller_configuration_secure_logging: false
        # controller_configuration_credential_types_secure_logging: true
        controller_configuration_filetree_read_tasks:
          - {name: settings, var: controller_settings, tags: settings}
          - {name: organizations, var: aap_organizations, tags: organizations}
          - {name: labels, var: controller_labels, tags: labels}
          - {name: user_accounts, var: aap_user_accounts, tags: users}
          # - {name: teams, var: aap_teams, tags: teams}
          - {name: credential_types, var: controller_credential_types, tags: credential_types}
          - {name: credential_input_sources, var: controller_credential_input_sources, tags: credential_input_sources}
          - {name: credentials, var: controller_credentials, tags: credentials}
          - {name: notifications, var: controller_notifications, tags: notification_templates}
          - {name: projects, var: controller_projects, tags: projects}
          - {name: execution_environments, var: controller_execution_environments, tags: execution_environments}
          - {name: applications, var: aap_applications, tags: applications}
          - {name: inventories, var: controller_inventories, tags: inventories}
          - {name: inventory_sources, var: controller_inventory_sources, tags: inventory_sources}
          - {name: instance_groups, var: controller_instance_groups, tags: instance_groups}
          - {name: hosts, var: controller_hosts, tags: hosts}
          - {name: groups, var: controller_groups, tags: inventories}
          - {name: job_templates, var: controller_templates, tags: job_templates}
          - {name: workflow_job_templates, var: controller_workflows, tags: workflow_job_templates}
          - {name: schedules, var: controller_schedules, tags: schedules}
          - {name: roles, var: controller_roles, tags: roles}

    # - name: Include configuration for {{ demo }}
    #   ansible.builtin.include_vars: "export_ft4/current_credential_types.yaml"
    #
    # - name: Demo Components
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.dispatch
    #   vars:
    #     controller_dependency_check: false  # noqa: var-naming[no-role-prefix]

    - name: Dispatch the configuration to AAP 2.5
      ansible.builtin.include_role:
        name: infra.aap_configuration.dispatch
      vars:
        controller_configuration_filetree_create_secure_logging: false
        aap_configuration_secure_logging: false
        aap_configuration_collect_logs: false
        cas_secure_logging: false

  post_tasks:
    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined

...
