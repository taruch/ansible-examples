---
- name: Playbook to show nodes on the failure recovery track of the workflow
  hosts: "{{ failed_nodes }}"
  gather_facts: false
  vars:
    recovery_success_nodes: []
    recovery_failed_nodes: []
  tasks:

    - name: Task that may fail, with rescue to track success and failure nodes
      block:
        - name: Simulate a task that may fail by assert that ansible_distribution_major_version == 9
          ansible.builtin.assert:
            that:
              - ansible_distribution_major_version == "10"
            fail_msg: "This task simluates a failure in a playbook that we want to recover from."
            success_msg: "This host passed the test"

        - name: Define successful node
          ansible.builtin.set_fact:
            failed_node: "false"
      rescue:
        - name: Define failure node
          ansible.builtin.set_fact:
            failed_node: "true"

    - name: Print out nodes that were successful in this play
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      when: hostvars[item].failed_node is false
      ansible.builtin.debug:
        msg: "Successful node: {{ hostvars[item].inventory_hostname }}"
        verbosity: 2

    - name: Print out nodes that failed this play
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      when: hostvars[item].failed_node is true
      ansible.builtin.debug:
        msg: "Failure node: {{ hostvars[item].inventory_hostname }}"
        verbosity: 2

    - name: Generate a combined list of successful nodes
      delegate_to: localhost # Run this task on the control node
      when: hostvars[item].failed_node is false
      run_once: true # Ensure the set_fact is executed only once
      loop: "{{ groups['all'] }}" # Or a specific group
      ansible.builtin.set_fact:
        recovery_success_nodes: "{{ success_nodes + [hostvars[item].inventory_hostname] }}"

    - name: Debug successful nodes
      delegate_to: localhost
      run_once: true
      ansible.builtin.debug:
        msg: "Successful nodes: {{ success_nodes }}"
        verbosity: 2

    - name: Generate a combined list of failed nodes
      delegate_to: localhost # Run this task on the control node
      when: hostvars[item].failed_node is true
      run_once: true # Ensure the set_fact is executed only once
      loop: "{{ groups['all'] }}" # Or a specific group
      ansible.builtin.set_fact:
        recovery_failed_nodes: "{{ recovery_failed_nodes + [hostvars[item].inventory_hostname] }}"

    - name: Debug failed nodes
      delegate_to: localhost
      run_once: true
      ansible.builtin.debug:
        msg: "Failed nodes: {{ failed_nodes }}"

    - name: Send success and failure nodes to workflow
      delegate_to: localhost
      run_once: true
      ansible.builtin.set_stats:
        data:
          combined_success_nodes: "{{ (recovery_success_nodes + success_nodes) | unique }}"
          recovery_failed_nodes: "{{ recovery_failed_nodes }}"